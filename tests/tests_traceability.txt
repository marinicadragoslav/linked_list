NewList                 -> double, single, invalid linkage                      (test 1)

GetHead                 -> NULL list                                            (test 2)
                        -> empty list                                           (test 9 + each call to ExpectEmptyList)
                        -> list with x nodes                                    (each call to ExpectListWith[x]Nodes)

GetTail                 -> NULL list                                            (test 2)
                        -> empty list                                           (test 9 + each call to ExpectEmptyList)
                        -> list with x nodes                                    (each call to ExpectListWith[x]Nodes)

GetNodeByData           -> NULL list                                            (test 2)
                        -> NULL data                                            (test 6)
                        -> empty list                                           (test 9)
                        -> from head/tail/middle of a list                      (test 30)

GetNext                 -> NULL node                                            (test 4)
                        -> list with x nodes                                    (test 19, 25, each call to ExpectListWith[x]Nodes)

GetPrev                 -> NULL node                                            (test 4)
                        -> list with x nodes                                    (test 19, each call to ExpectListWith[x]Nodes)

GetData                 -> NULL node                                            (test 4)
                        -> list with x nodes                                    (each call to ExpectListWith[x]Nodes)

DeleteList              -> empty list                                           (test 1)
                        -> NULL list                                            (test 2)
                        -> 1 node list                                          (test 6)
                        -> more than one node                                   (test 13, 17, 19, 20, 21, 23, etc)

AddToFront              -> NULL list                                            (test 3)
                        -> NULL data                                            (test 7)
                        -> empty list                                           (test 12)
                        -> one node list                                        (test 13)
                        -> more than one node                                   (test 25)

AddToBack               -> NULL list                                            (test 3)
                        -> NULL data                                            (test 7)
                        -> empty list                                           (test 12)
                        -> one node list                                        (test 15)
                        -> more than one node                                   (test 15)

InsertAfterNode         -> NULL node                                            (test 5)
                        -> NULL data                                            (test 7)
                        -> after head (1 & 2 nodes list)                        (test 17)
                        -> after tail (1 & 2 nodes list)                        (test 18)
                        -> after middle node                                    (test 19)

InsertAfterData         -> NULL list                                            (test 3)
                        -> NULL data (new data)                                 (test 7)
                        -> NULL data (existing data)                            (test 7)
                        -> empty list                                           (test 11)
                        -> inexistent data, non-empy list                       (test 20)
                        -> after head data                                      (test 21)
                        -> after tail data                                      (test 22)
                        -> after data in the middle                             (test 23)

RemoveHead             -> NULL list                                            (test 3)
                        -> empty list                                           (test 10, 16)
                        -> one & two node list                                  (test 16, 24)

RemoveTail              -> NULL list                                            (test 3)
                        -> empty list                                           (test 10, 14)
                        -> one & two node list                                  (test 14, 24)

RemoveNode              -> NULL node                                            (test 5)
                        -> from the middle (list with 3, 4 nodes)               (test 25)
                        -> when node is head/tail (list with 1, 2, 3 nodes)     (test 31)

RemoveNodeByData        -> NULL list                                            (test 3)
                        -> NULL data                                            (test 7)
                        -> empty list                                           (test 10)
                        -> inexistent data (1, 2, 3 node list)                  (test 26)
                        -> front/back (1, 2, 3 node list)                       (test 27)
                        -> middle of a list                                     (test 28)

GetCount                -> NULL list                                            (test 3)
                        -> NULL count                                           (test 8)
                        -> Empty List                                           (each call to ExpectEmptyList)
                        -> list with x nodes                                    (each call to ExpectListWith[x]Nodes)

SetData                 -> NULL node                                            (test 5)
                        -> NULL data                                            (test 7)
                        -> valid node                                           (test 32)